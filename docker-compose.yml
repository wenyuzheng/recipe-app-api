# Docker compose version
version: "3.9"

# app is the name of our services
# build block: build the docker file from the current directory
# port block: maps p0ort 8000 from local machine to port 8000 inside the Docker container, this is how to access network when connecting to server
# volumes block: maps app directory from our system into app directory in Docker container, this is to sync the updated code into the container so no rebuild container is needed
# command block: this can be override, otherwise this is the default command to use in container
services: 
  app:
    build:
      context: .
      args:
        - DEV=true
    ports:
      - "8000:8000"
    volumes: 
      - ./app:/app
      - dev-static-data:/vol/web
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment: # this section should match the value in the db section
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
    depends_on: # this tells docker compose that the app service depends on the db service so it will try to wait for the db service to start before starting the app service, and if db service fails then app service should fail too.
      - db

  db:
    image: postgres:13-alpine # can be found on dockerhub website
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment: # This block is to set the initial database config for new db service
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme


volumes: 
  dev-db-data: # no need to add anything here after colon because docker compose will handle automatically and store it in the default location
  dev-static-data: